import { Telegraf, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import dotenv from 'dotenv';
import LocalSession from 'telegraf-session-local';
import { getSheetData } from './sheets';
import { CustomContext, SessionData, Product } from './types/session';

dotenv.config();

const bot = new Telegraf<CustomContext>(process.env.BOT_TOKEN!);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
const localSession = new LocalSession<SessionData>({
  database: 'session_db.json',
});
bot.use(localSession.middleware());

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ session –≤—Å–µ–≥–¥–∞ –∑–∞–¥–∞–Ω–∞
bot.use((ctx, next) => {
  if (!ctx.session) ctx.session = {};
  return next();
});

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±—ä–µ–∫—Ç Product
function mapRowToProduct(row: any[]): Product {
  const [id, name, category, price, , quantity, photoUrl] = row;
  return { id, name, category, price, quantity, photoUrl };
}

// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
bot.start(async (ctx) => {
    const firstName = ctx.update.message.from.first_name;

    await ctx.replyWithSticker('https://cdn2.combot.org/beer728/webp/0xf09faba5.webp');
    ctx.reply(
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ firstName }! –ù–∞–∂–º–∏—Ç–µ "–ú–µ–Ω—é", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.`,
      Markup.keyboard([['üìã –ú–µ–Ω—é']]).resize().oneTime()
    );
  }
);


// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.hears('üìã –ú–µ–Ω—é', (ctx) =>
  ctx.reply(
    'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
    Markup.keyboard([['üç∫ –ü–∏–≤–æ', 'ü•® –ó–∞–∫—É—Å–∫–∏']]).resize()
  )
);

// –†–∞–∑–¥–µ–ª "–ü–∏–≤–æ" ‚Äî –≤—ã–±–æ—Ä —Ç–∏–ø–∞
bot.hears('üç∫ –ü–∏–≤–æ', (ctx) =>
  ctx.reply(
    'üçª –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏–≤–∞:',
    Markup.keyboard([['üåû –°–≤–µ—Ç–ª–æ–µ', 'üåë –¢–µ–º–Ω–æ–µ'], ['üîô –ù–∞–∑–∞–¥'], ['üõí –ö–æ—Ä–∑–∏–Ω–∞']]).resize()
  )
);

// bot.on(message('text'), (ctx) => {
//   console.log('–≤—Å—ë, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç:', ctx.message.text);
// });
//
// bot.catch((err, ctx) => {
//   console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
// });

// –®–∞–±–ª–æ–Ω—ã –∑–∞–∫—É—Å–æ–∫
bot.hears('ü•® –ó–∞–∫—É—Å–∫–∏', (ctx) =>
  ctx.reply(
    'ü•® –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫—É—Å–æ–∫:',
    Markup.keyboard([
      ['üêü –†—ã–±–Ω—ã–µ —Å–Ω–µ–∫–∏', 'üê† –°—É—à–µ–Ω–∞—è —Ä—ã–±–∞'],
      ['ü•ú –û—Ä–µ—Ö–∏/–ö—É–∫—É—Ä—É–∑–∞/–ö—Ä–∞–Ω—á–∏'],
      ['üçû –ß–∏–ø—Å—ã/–ì—Ä–µ–Ω–∫–∏/–°—É—Ö–∞—Ä–∏–∫–∏', 'üßÄ –°—ã—Ä'],
      ['üîô –ù–∞–∑–∞–¥'],
      ['üõí –ö–æ—Ä–∑–∏–Ω–∞']
    ]).resize()
  )
);

// –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–∫—É—Å–æ–∫
const snackSubcategories: Record<string, string> = {
  'üêü –†—ã–±–Ω—ã–µ —Å–Ω–µ–∫–∏': '–†—ã–±–Ω—ã–µ —Å–Ω–µ–∫–∏',
  'üê† –°—É—à–µ–Ω–∞—è —Ä—ã–±–∞': '–°—É—à–µ–Ω–∞—è —Ä—ã–±–∞',
  'ü•ú –û—Ä–µ—Ö–∏/–ö—É–∫—É—Ä—É–∑–∞/–ö—Ä–∞–Ω—á–∏': '–û—Ä–µ—Ö–∏/–ö—É–∫—É—Ä—É–∑–∞/–ö—Ä–∞–Ω—á–∏',
  'üçû –ß–∏–ø—Å—ã/–ì—Ä–µ–Ω–∫–∏/–°—É—Ö–∞—Ä–∏–∫–∏': '–ß–∏–ø—Å—ã/–ì—Ä–µ–Ω–∫–∏/–°—É—Ö–∞—Ä–∏–∫–∏',
  'üßÄ –°—ã—Ä': '–°—ã—Ä',
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—É—Å–æ–∫
for (const label in snackSubcategories) {
  bot.hears(label, async (ctx) => {
    const sub = snackSubcategories[label];
    const data = await getSheetData('Snacks!A2:G');
    const items = data?.filter(row => row[2] === sub && row[4] === 'TRUE') ?? [];

    if (items.length === 0) {
      return ctx.reply(
        'üòï –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞.',
        Markup.keyboard([['üîô –ù–∞–∑–∞–¥']]).resize()
      );
    }

    for (const row of items) {
      const p = mapRowToProduct(row);
      const cap = `üì¶ <b>${ p.name }</b>\nüí∞ ${ p.price }‚Ç¥\nüìä –û—Å—Ç–∞—Ç–æ–∫: ${ p.quantity }`;
      const button = Markup.button.callback('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `DETAIL_${ p.id }`);
      if (p.photoUrl) {
        await ctx.replyWithPhoto(p.photoUrl, { caption: cap, parse_mode: 'HTML', ...Markup.inlineKeyboard([button]) });
      } else {
        await ctx.reply(cap, { parse_mode: 'HTML', ...Markup.inlineKeyboard([button]) });
      }
    }
    ctx.session.lastMenu = 'snacks';
  });
}

// –¢–∏–ø—ã –ø–∏–≤–∞
const beerTypes: Record<string, string> = {
  'üåû –°–≤–µ—Ç–ª–æ–µ': '–°–≤–µ—Ç–ª–æ–µ',
  'üåë –¢–µ–º–Ω–æ–µ': '–¢–µ–º–Ω–æ–µ'
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏–≤–∞
for (const label in beerTypes) {
  bot.hears(label, async (ctx) => {
    const sub = beerTypes[label];
    const data = await getSheetData('Beer!A2:G');
    const items = data?.filter(row => row[2] === sub && row[4] === 'TRUE') ?? [];

    if (items.length === 0) {
      return ctx.reply(
        'üòï –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞.',
        Markup.keyboard([['üîô –ù–∞–∑–∞–¥']]).resize()
      );
    }

    for (const row of items) {
      const p = mapRowToProduct(row);
      const cap = `üì¶ <b>${ p.name }</b>\nüí∞ ${ p.price }‚Ç¥\nüìä –û—Å—Ç–∞—Ç–æ–∫: ${ p.quantity }`;
      const button = Markup.button.callback('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `DETAIL_${ p.id }`);
      if (p.photoUrl) {
        await ctx.replyWithPhoto(p.photoUrl, { caption: cap, parse_mode: 'HTML', ...Markup.inlineKeyboard([button]) });
      } else {
        await ctx.reply(cap, { parse_mode: 'HTML', ...Markup.inlineKeyboard([button]) });
      }
    }
    ctx.session.lastMenu = 'beer';
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
bot.action(/^DETAIL_(.+)$/, async (ctx) => {
  const id = ctx.match[1];
  const sheet = ctx.session.lastMenu === 'snacks' ? 'Snacks!A2:G' : 'Beer!A2:G';
  const data = await getSheetData(sheet);
  const row = data?.find(r => r[0] === id);
  if (!row) return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ.');

  const p = mapRowToProduct(row);
  const cap = `üì¶ <b>${ p.name }</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${ p.category }\nüí∞ ${ p.price }‚Ç¥\nüìä –û—Å—Ç–∞—Ç–æ–∫: ${ p.quantity }`;
  const button = Markup.button.callback('‚ûï –í –∫–æ—Ä–∑–∏–Ω—É', `ADD_${ p.id }`);
  if (p.photoUrl) {
    await ctx.replyWithPhoto(p.photoUrl, { caption: cap, parse_mode: 'HTML', ...Markup.inlineKeyboard([button]) });
  } else {
    await ctx.reply(cap, { parse_mode: 'HTML', ...Markup.inlineKeyboard([button]) });
  }
  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
bot.action(/^ADD_(.+)$/, async (ctx) => {
  const id = ctx.match[1];
  const sheet = ctx.session.lastMenu === 'snacks' ? 'Snacks!A2:G' : 'Beer!A2:G';
  const data = await getSheetData(sheet);
  const row = data?.find(r => r[0] === id);
  if (!row) return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ.');

  ctx.session.pendingProduct = mapRowToProduct(row);
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');
  await ctx.answerCbQuery();
});


// –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã  'üõí –ö–æ—Ä–∑–∏–Ω–∞'
bot.hears('üõí –ö–æ—Ä–∑–∏–Ω–∞', (ctx) => {
  const cart = ctx.session.cart;
  if (!cart?.length) return ctx.reply('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
  let tot = 0;
  const lines = cart.map(i => {
    const sum = i.price * i.qty;
    tot += sum;
    return `${ i.name } ‚Äî ${ i.qty } x ${ i.price }‚Ç¥ = ${ sum }‚Ç¥`;
  });
  ctx.reply(`<b>üõí –ö–æ—Ä–∑–∏–Ω–∞:</b>\n${ lines.join('\n') }\n\n<b>–ò—Ç–æ–≥–æ: ${ tot }‚Ç¥</b>`, { parse_mode: 'HTML' });
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
bot.hears('üîô –ù–∞–∑–∞–¥', (ctx) => {
  console.log('üîô –ù–∞–∑–∞–¥', ctx);
  ctx.session.lastMenu = undefined;
  ctx.reply(
    'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
    Markup.keyboard([['üç∫ –ü–∏–≤–æ', 'ü•® –ó–∞–∫—É—Å–∫–∏']]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
bot.on(message('text'), (ctx) => {
  const prod = ctx.session.pendingProduct;
  if (!prod) return; // –ù–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥

  const qty = parseInt(ctx.message.text);
  if (!qty || qty <= 0) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ >0');

  ctx.session.cart = ctx.session.cart ?? [];
  ctx.session.cart.push({ id: prod.id, name: prod.name, price: +prod.price, qty });
  ctx.session.pendingProduct = undefined;
  ctx.reply(`‚úÖ ${ prod.name } x${ qty } –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`);
});

// –ó–∞–ø—É—Å–∫
bot.launch().then(() => {
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  bot.telegram.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞–ª–æ' },
  ]);
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
